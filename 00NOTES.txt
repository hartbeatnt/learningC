FUNCTION DEFINITION SYNTAX: 
  data-type function-name(argument-types,) {statements to be exectued;}
/////////////////////////////////////////////////////// 
data-type is the return value of the function's type

programs can have multiple functions but must always have at least one called "main"

function names cannot begin with numbers

strings must be enclosed in double quotes
single characters must be enclosed in single quotes
//////////////////////////////////////////////////////
//
//  COMPILING:
//  --  Four separate stages, each of which generate a new file:
//      --  PREPROCESSING: The preprocessor ubstitutes all the preprocessor 
//            (#<>) directives with the actual library code that implements
//            those directives. Generated file has a .i extension
//
//      --  TRANSLATING: The compiler ranslates all the high-level //
//            instructions from ths .i file into assembly language 
//            instructions. Generated file has a .s extension
//
//      --  ASSEMBLING: The assembler converts the assembly language
//            from the .s file into machine code. Generated object file
//            is in binary and has .s extension
//
//      --  LINKING: The linker combines one or more binary object .o files
//            into a single executable file. Generated file is in binary and
//            has a .exe file extension.
//
//  --  If the program contains syntax errors, they will be reported by the
//        compiler and the program will not build
//
//  --  The linker can combine multiple object binaries. If it finds a function
//        of the same name declared in multiple object files it will report an
//        error and the executable will not be created
//
///////////////////////////////////////////////////////

\\\\\\\//////
__VARIABLES__
  --  declared in following syntax: 
        data-type variable-name ;
    --  cannot contain any C keywords
    --  cannot contain arithmetic operators (+ - = * /)
    --  cannot contain punctuation characters (~ ! @ # % ^ & * ( ) ' ")
    --  cannot contain any spaces
    --  cannot start with a number
    --  can contain numbers in any position other than the first
    --  can contain both uppercase and lowercase letters
    --  can contain underscores
    --  are case sensitive
  --  available data types:
    --  "char": single byte, holds one character
    --  "int": integer whole number
    --  "float": floating-point number accurate to six decimal places
    --  "double": floating-point number accurate to ten decimal places
    --  multiple variables of the same type can be declared in the same line
        with a comma-separated list:
          data-type variable-name-1, variable-name-2, variable-name-3
  --  variables should be declared in the program before any executable code
  --  a variable is "initialized" when a value is assigned to it
    --  code to left of assignment operator is called L-value object
    --  code to the right of assignment operator is called R-value data
    --  variables can be initialized when first declared or at a later point
  -- Displaying a variable:
    --  Format must be specified as an argument to the printf() function:
      --  %d: an integer between -32768 and +32767
      --  %ld: a long integer (between -2^31 and +2^31)
      --  %f: a floating-point number
      --  %c: a single character
      --  %s: a string of characters
      --  %p: a machine-memory address
        --  a minimum space specifier can set the minimum number of characters 
            that the print must contain
          --  %7d would make the digit take up seven characters
          --  passing a 0 between % and [n] filles empty spaces with zeroes
          --  prefixing with a negative sign causes left-alignment
        --  a precision specifier can be used with %f to determine how many
            decimal places to show, i.e. %.2f would show two
        --  precision specifier can be combined with minimum space
          --  syntax: minimum space first, then precision
          --  %07.2f would show seven characters including two decimal places
//////////////////\\\\\\\\\\\\\\\\\
//
//  INPUT / OUTPUT  
//  --  scanf() function is used to get user input. Requires two arguments:
//    --  type of data to be input
//      --  use one of the above format specifiers
//    --  location to store output
//      --  must be a variable name preceded by the & operator
//         --  unless teh input is a string of text
//        --  & has many uses in C, but in this case it is the "addressof" 
//            operator. 
//              --  Means the data should be stored at the memory
//                  address reserved for that variable
//              --  Can also be used to retrieve the hexadecimal memory address
//                  of where a variable is saved
//  --  scanf() can simultaneously assign value to multiple variables at once
//    --  first argument must be a list of format specifiers separated by spaces
//        and surrounded by double quotes
//    --  second argument must be a comma-separated list of variable names 
//        preceded by & operator (so realyy 2nd argument, 3rd argument, 4th, etc)
//
///////////////////////////////////////////////////////
                                                     //
                  QUALIFYING VARIABLES               //
      --  ints can be specified as short or long     //
        --  short: takes up less memory space        //
        --  long: holds a bigger range of numbers    //
      --  ints can double their max value by being   //
          declared "unsigned," but then cannot hold  //
          negative values                            //
      --  <limits.h> contains all the info about     //
          implementation-specific mins and maxs      //
      --  sizeof operator is used to reveal the      //
          amount of memory reserved by variables of  //
          different data types                       //
                                                     //
///////////////////////////////////////////////////////

SCOPING
  --  variable declared within a function are "local"
    --  can only be accessed from within the function
        in which they were declared
  --  variables declared outside of a function are "global"
    --  can be accessed from within any function in the programs
    --  must be declared once at the start of the program, and then
        once at the start of each function that uses it
        --  extern keyord must be used at start of declaration
            when declared in a function
        --  static keyword limits variables and functions to
            being used in the file in which they were declared
            --  allows for variable / function names to be reused
                in different files
            --  using static when declaring variables within a function
                makes it so the variable is not deleted when the function
                finishes executing (like for closures? idk)
    --  extensive use of global variables is risky
  
///////////////////
REGISTERING VARIABLES
  --  if a variable is expected to be used frequently, the register
      keyword can be used to save it in an easier to locate memory 
      address.
      --  many compilers ignore this
      --  volatile keyword does the opposite
///////////////////
CASTING: the process of converting a variable to a new data-type
    --  syntax: variable-name2 = (modifiers data-type) variable-name1
    --  does not actually change the type of the variable but copies
        the data to new variable of the new type
    --  casting float to int results in decimal being truncated, not rounded
    --  casting double to float DOES round the result
    --  casting char to int results in the ascii value of that char
    --  casting int to char results in ascii value for that int
////////////////////
//
//  ARRAYS
//
//  --  0-based indexing
//  --  size of array must be specified in declaration
//    --  data-type array-name [number-of-elements]
//    --  adding a \0 (null character escape) to the end
//        of an array of chars makes it a string
//    --  can leave out the number of elements if the
//        array is being initialized when declared:
//        --  char newString[] = {'a', 'b', 'c', '\0'}
//    --  individual indices in the array are accessed
//        with brackets, i.e. newString[2]
//